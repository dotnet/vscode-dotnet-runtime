parameters:
  pool: ''
  SignType: ''
  useOneEngineeringPool: ''

jobs:
  - deployment: PublishToMarketplace
    templateContext:
      type: releaseJob
      isProduction: true
    pool:
      ${{ parameters.pool }}
    displayName: 'üåê Publish to Marketplace'
    environment: 'vscode-dotnetcore-extension-releases'  # This requires approval gates configured in Azure DevOps
    dependsOn:
    - ${{ parameters.pool.os }}_Package
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'üì• Checkout source code'
          - task: DownloadPipelineArtifact@2
            displayName: '‚¨áÔ∏è Download Packaged Extension'
            inputs:
              path: '$(System.ArtifactsDirectory)'
          - template: install-node.yaml
          - bash: |
              VERSION=`node -p "require('./package.json').version"`
              npm version $VERSION --allow-same-version
              echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
            name: GetVersion
            displayName: '‚ùì Get Version'
            workingDirectory: 'vscode-dotnet-runtime-extension'
          - task: AzureCLI@2
            displayName: 'üöÄ Publish to Marketplace'
            inputs:
              azureSubscription: 'VSCode Marketplace Publishing'
              scriptType: "pscore"
              scriptLocation: 'inlineScript'
              workingDirectory: '$(System.ArtifactsDirectory)'
              inlineScript: |
                npm i -g --verbose @vscode/vsce

                # Debug: List the artifacts directory structure
                Write-Host "Artifacts directory contents:"
                Get-ChildItem -Recurse | Format-Table Name, FullName

                # Find the required files
                $vsixFile = Get-ChildItem -Recurse -Filter "vscode-dotnet-runtime-$(GetVersion.version).vsix" | Select-Object -First 1
                if (-not $vsixFile) {
                  $vsixFile = Get-ChildItem -Recurse -Filter "vscode-dotnet-runtime-$(GetVersion.version)-signed.vsix" | Select-Object -First 1
                }

                $manifestFile = Get-ChildItem -Recurse -Filter "vscode-dotnet-runtime-$(GetVersion.version).manifest" | Select-Object -First 1
                $signatureFile = Get-ChildItem -Recurse -Filter "vscode-dotnet-runtime-$(GetVersion.version).signature.p7s" | Select-Object -First 1

                if (-not $vsixFile -or -not $manifestFile -or -not $signatureFile) {
                  Write-Error "Could not find required files for version $(GetVersion.version)"
                  Write-Error "VSIX: $($vsixFile -ne $null)"
                  Write-Error "Manifest: $($manifestFile -ne $null)"
                  Write-Error "Signature: $($signatureFile -ne $null)"
                  exit 1
                }

                Write-Host "Using VSIX file: $($vsixFile.FullName)"
                Write-Host "Using manifest: $($manifestFile.FullName)"
                Write-Host "Using signature: $($signatureFile.FullName)"

                $publishArgs = @(
                  'publish'
                  '--azure-credential'
                  '--packagePath'
                  $vsixFile.FullName
                  '--manifestPath'
                  $manifestFile.FullName
                  '--signaturePath'
                  $signatureFile.FullName
                )

                If ("${{ parameters.SignType }}" -ne "Real") {
                  Write-Host "With a test-signed build, the command to publish is printed instead of run."
                  Write-Host "##[command]vsce $publishArgs"
                }
                Else {
                  Write-Host "##[command]vsce $publishArgs"

                }